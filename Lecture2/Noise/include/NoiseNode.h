#ifndef NOISE_NODE_H_
#define NOISE_NODE_H_


#include <maya/MTypeId.h>
#include <maya/MStatus.h>
#include <maya/M3dView.h>
#include <maya/MGlobal.h>
#include <maya/MPxLocatorNode.h>
#include <maya/MFnDependencyNode.h>
#include <maya/MNodeMessage.h>
#include <maya/MMessage.h>
#include <memory>
#include "Noise.h"
//----------------------------------------------------------------------------------------------------------------------
/// @brief this class implements a perlin noise node with one output, it has 3 different noise
/// access types noise, turbulance and complex descriptions below
//----------------------------------------------------------------------------------------------------------------------

class NoiseNode : public MPxNode
{

public:
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the creator node is called when the plugin is created
  //----------------------------------------------------------------------------------------------------------------------
  static void		*creator();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief initialize called when plug is created
  //----------------------------------------------------------------------------------------------------------------------
  static MStatus		initialize();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief compute is called every time the attributes of the class change
  /// @param [in] 	_plug 	plug representing the attribute that needs to be recomputed
  /// @param [in] 	_block 	data block containing storage for the node'_scale attributes
  //----------------------------------------------------------------------------------------------------------------------
  virtual MStatus		compute(
                             const MPlug &_plug ,
                              MDataBlock &_block
                            );


  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the id of this plugin must be public so we can set outside of class
  //----------------------------------------------------------------------------------------------------------------------
  static MTypeId 		m_id;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the unique type name of our custom node. Mainly for mel purposes.
  /// must be public so maya can access
  //----------------------------------------------------------------------------------------------------------------------
  static const MString typeName;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief ctor this will dynamically allocate a Noise class
  //----------------------------------------------------------------------------------------------------------------------
  NoiseNode();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief dtor this will destroy the noise class created in the ctor
  //----------------------------------------------------------------------------------------------------------------------
  ~NoiseNode();

private :
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the amplitude of our node
  //----------------------------------------------------------------------------------------------------------------------
  static MObject m_amplitude;
  ///----------------------------------------------------------------------------------------------------------------------
  // @brief the xpos of our node input
  //----------------------------------------------------------------------------------------------------------------------
  static MObject m_tx;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the ypos of our node input
  //----------------------------------------------------------------------------------------------------------------------
  static MObject m_ty;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the zpos of our node input
  //----------------------------------------------------------------------------------------------------------------------
  static MObject m_tz;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the output to our node
  //----------------------------------------------------------------------------------------------------------------------
  static MObject m_output;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief noise type
  //----------------------------------------------------------------------------------------------------------------------
  static MObject m_noiseType;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief scale type
  //----------------------------------------------------------------------------------------------------------------------
  static MObject m_scale;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief seed for the rng type
  //----------------------------------------------------------------------------------------------------------------------
  static MObject m_seed;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief steps for complex noise
  //----------------------------------------------------------------------------------------------------------------------
  static MObject m_steps;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief persitence for complex noise
  //----------------------------------------------------------------------------------------------------------------------
  static MObject m_persistence;

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the noise generator
  //----------------------------------------------------------------------------------------------------------------------
  std::unique_ptr<Noise>m_noise;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the  noise types to use
  /// @note can't use enum classes from C++ 11 as need to be short or convertable
  //----------------------------------------------------------------------------------------------------------------------
  enum NoiseTypes{NOISE,TURBULANCE,COMPLEX};
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the previous seed value to compare with (see notes in compute for rationelle)
  //----------------------------------------------------------------------------------------------------------------------
  unsigned int m_seedValue;
  //----------------------------------------------------------------------------------------------------------------------

};
//----------------------------------------------------------------------------------------------------------------------

#endif


